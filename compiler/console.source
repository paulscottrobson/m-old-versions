// *****************************************************************************
// *****************************************************************************
//
//		Name:		console.m12
//		Purpose:	Console I/O routines
//		Author:		paul@robsons.org.uk
//		Date:		30th July 2018
//
// *****************************************************************************
// *****************************************************************************

variable:con.cursorPos	 					// console cursor position
variable:con.colour  						// current colour in bits 6 and 7

// *****************************************************************************
//								Home Cursor
// *****************************************************************************

:con.home
	push.ab
		0 con.cursorPos! con.cursor!
	pop.ab
;
// *****************************************************************************
//						Clear screen & Home Cursor
// *****************************************************************************

:con.clear
	con.clear.screen con.home
;

// *****************************************************************************
//							Emit in 6 + 2 format.
// *****************************************************************************

:con.emit.direct
	push.ab
		con.cursorPos@ con.screen! 
		1 con.cursorPos +!
		con.cursorPos@ con.cursor!
		con.cursorPos@ 640 = if con.clear then
	pop.ab
;

// *****************************************************************************
//								Emit in current colour
// *****************************************************************************

:con.emit
	push.ab
		$3F and con.colour@ + con.emit.direct 
	pop.ab
;

// *****************************************************************************
//									Single space
// *****************************************************************************

:con.space 
	push.ab
		$20 con.emit.direct 
	pop.ab
;

// *****************************************************************************
//									  Colours
// *****************************************************************************

:con.white  push.ab $00 con.colour! pop.ab ;
:con.red    push.ab $40 con.colour! pop.ab ;
:con.green  push.ab $80 con.colour! pop.ab ;
:con.yellow push.ab $0C0 con.colour! pop.ab ;

// *****************************************************************************
//								   Print a string
// *****************************************************************************

:con.print.string
	push.ab
	a>b c@ 
	for
		swap 1+ a>b c@ con.emit 
	next
	pop.ab
;

// *****************************************************************************
//							 Print an integer in hex
// *****************************************************************************

:con.print.nibble private
	15 and -10 + -if -7 + then 1+ 
	con.emit
;
:con.print.byte private
	a>r 2/ 2/ 2/ 2/ con.print.nibble r>a con.print.nibble
;
:con.print.hex
	push.ab
		a>r a>r con.space r>a 
		bswap con.print.byte 
		r>a con.print.byte 
	pop.ab
;

// *****************************************************************************
//									Carriage Return
// *****************************************************************************

:con.cr
	push.ab
	begin
		$20 con.emit.direct
		con.cursorPos@ $1F and 0=
	until 
	pop.ab
;

// *****************************************************************************
//									Double line break
// *****************************************************************************

:con.br
	con.cr con.cr
;

// *****************************************************************************
//								 Read a keyboard key
// *****************************************************************************

:con.getkey
	a>b push.ab 						// loading value so does A->B load.
		begin con.inkey 0= until
		begin con.inkey until 
	pop.bb
;

// *****************************************************************************
//							List Dictionary to console
// *****************************************************************************

:con.vlist
;
	