              	; --------------------------------------
              	; zasm: assemble "system.asm"
              	; date: 2018-08-01 21:48:29
              	; --------------------------------------


              	; ****************************************************************************************
              	; ****************************************************************************************
              	;
              	;		Name:		system.asm
              	;		Purpose:	Base file for M10 Compiler/Runtime
              	;		Date:		29th July 2018
              	;		Author:		Paul Robson (paul@robsons.org.uk)
              	;
              	; ****************************************************************************************
              	; ****************************************************************************************
              	
5B00:         			org 	$5B00
5B00: ED7B4481			ld 		sp,(SIStack)						; set up stack.
5B04: CDE65C  			call 	IOClearScreen 						; clear screen
5B07: 2A4281  			ld 		hl,(SIRuntimeAddress)				; this is where you run from (initially Halt code)
5B0A: E9      			jp 		(hl)								; go there
              	
5B0B: FFFFFFFF			org 	$5C00 								; allow space for the stack
5B0F: FF...   	
5C00:         	StackTop:		
              			include "asm/macro.asm"						; macro code.
              	; **** generated by scanner.py ****
              	
              	
              	; ***** - *****
              	
5C00:         	word_def__macro_2d:
5C00: 3E07    	        ld a,end_word_def__macro_2d-word_def__macro_2d-3-2
5C02: CD2881  	        call MacroExpander
5C05: 44      	        ld         b,h                                 ; value to subtract in BC
5C06: 4D      	        ld         c,l
5C07: 62      	        ld        h,d                                 ; value to subtract from in HL
5C08: 6B      	        ld         l,e
5C09: AF      	        xor      a                                     ; clear carry
5C0A: ED42    	        sbc     hl,bc                                 ; and subtract.
5C0C:         	end_word_def__macro_2d:
              	
              	; ***** + *****
              	
5C0C:         	word_def__macro_2b:
5C0C: 3E01    	        ld a,end_word_def__macro_2b-word_def__macro_2b-3-2
5C0E: CD2881  	        call MacroExpander
5C11: 19      	        add         hl,de
5C12:         	end_word_def__macro_2b:
              	
              	; ***** * *****
              	
5C12:         	word_def__macro_2a:
5C12: 3E03    	        ld a,end_word_def__macro_2a-word_def__macro_2a-3-2
5C14: CD2881  	        call MacroExpander
5C17: CD825E  	        call    Multiply16
5C1A:         	end_word_def__macro_2a:
              	
              	; ***** c@ *****
              	
5C1A:         	word_def__macro_63_40:
5C1A: 3E03    	        ld a,end_word_def__macro_63_40-word_def__macro_63_40-3-2
5C1C: CD2881  	        call MacroExpander
5C1F: 6E      	        ld         l,(hl)
5C20: 2600    	        ld         h,0
5C22:         	end_word_def__macro_63_40:
              	
              	; ***** c! *****
              	
5C22:         	word_def__macro_63_21:
5C22: 3E01    	        ld a,end_word_def__macro_63_21-word_def__macro_63_21-3-2
5C24: CD2881  	        call MacroExpander
5C27: 73      	        ld         (hl),e
5C28:         	end_word_def__macro_63_21:
              	
              	; ***** @ *****
              	
5C28:         	word_def__macro_40:
5C28: 3E04    	        ld a,end_word_def__macro_40-word_def__macro_40-3-2
5C2A: CD2881  	        call MacroExpander
5C2D: 7E      	        ld         a,(hl)
5C2E: 23      	        inc     hl
5C2F: 66      	        ld         h,(hl)
5C30: 6F      	        ld         l,a
5C31:         	end_word_def__macro_40:
              	
              	; ***** ! *****
              	
5C31:         	word_def__macro_21:
5C31: 3E04    	        ld a,end_word_def__macro_21-word_def__macro_21-3-2
5C33: CD2881  	        call MacroExpander
5C36: 73      	        ld         (hl),e
5C37: 23      	        inc     hl
5C38: 72      	        ld         (hl),d
5C39: 2B      	        dec     hl
5C3A:         	end_word_def__macro_21:
              	
              	; ***** false *****
              	
5C3A:         	word_def__macro_66_61_6c_73_65:
5C3A: 3E04    	        ld a,end_word_def__macro_66_61_6c_73_65-word_def__macro_66_61_6c_73_65-3-2
5C3C: CD2881  	        call MacroExpander
5C3F: EB      	        ex         de,hl
5C40: 210000  	        ld         hl,$0000
5C43:         	end_word_def__macro_66_61_6c_73_65:
              	
              	; ***** pop.ab *****
              	
5C43:         	word_def__macro_70_6f_70_2e_61_62:
5C43: 3E02    	        ld a,end_word_def__macro_70_6f_70_2e_61_62-word_def__macro_70_6f_70_2e_61_62-3-2
5C45: CD2881  	        call MacroExpander
5C48: E1      	        pop     hl
5C49: D1      	        pop     de
5C4A:         	end_word_def__macro_70_6f_70_2e_61_62:
              	
              	; ***** pop.bb *****
              	
5C4A:         	word_def__macro_70_6f_70_2e_62_62:
5C4A: 3E02    	        ld a,end_word_def__macro_70_6f_70_2e_62_62-word_def__macro_70_6f_70_2e_62_62-3-2
5C4C: CD2881  	        call MacroExpander
5C4F: D1      	        pop     de
5C50: D1      	        pop     de
5C51:         	end_word_def__macro_70_6f_70_2e_62_62:
              	
              	; ***** push.ab *****
              	
5C51:         	word_def__macro_70_75_73_68_2e_61_62:
5C51: 3E02    	        ld a,end_word_def__macro_70_75_73_68_2e_61_62-word_def__macro_70_75_73_68_2e_61_62-3-2
5C53: CD2881  	        call MacroExpander
5C56: D5      	            push     de
5C57: E5      	            push     hl
5C58:         	end_word_def__macro_70_75_73_68_2e_61_62:
              	
              	; ***** a>r *****
              	
5C58:         	word_def__macro_61_3e_72:
5C58: 3E01    	        ld a,end_word_def__macro_61_3e_72-word_def__macro_61_3e_72-3-2
5C5A: CD2881  	        call MacroExpander
5C5D: E5      	        push     hl
5C5E:         	end_word_def__macro_61_3e_72:
              	
              	; ***** ; *****
              	
5C5E:         	word_def__macro_3b:
5C5E: 3E01    	        ld a,end_word_def__macro_3b-word_def__macro_3b-3-2
5C60: CD2881  	        call MacroExpander
5C63: C9      	        ret
5C64:         	end_word_def__macro_3b:
              	
              	; ***** r>a *****
              	
5C64:         	word_def__macro_72_3e_61:
5C64: 3E02    	        ld a,end_word_def__macro_72_3e_61-word_def__macro_72_3e_61-3-2
5C66: CD2881  	        call MacroExpander
5C69: EB      	        ex         de,hl
5C6A: E1      	        pop     hl
5C6B:         	end_word_def__macro_72_3e_61:
              	
              	; ***** true *****
              	
5C6B:         	word_def__macro_74_72_75_65:
5C6B: 3E04    	        ld a,end_word_def__macro_74_72_75_65-word_def__macro_74_72_75_65-3-2
5C6D: CD2881  	        call MacroExpander
5C70: EB      	        ex         de,hl
5C71: 21FFFF  	        ld         hl,$FFFF
5C74:         	end_word_def__macro_74_72_75_65:
              	
              	; ***** a>b *****
              	
5C74:         	word_def__macro_61_3e_62:
5C74: 3E02    	        ld a,end_word_def__macro_61_3e_62-word_def__macro_61_3e_62-3-2
5C76: CD2881  	        call MacroExpander
5C79: 54      	        ld         d,h
5C7A: 5D      	        ld         e,l
5C7B:         	end_word_def__macro_61_3e_62:
              	
              	; ***** b>a *****
              	
5C7B:         	word_def__macro_62_3e_61:
5C7B: 3E02    	        ld a,end_word_def__macro_62_3e_61-word_def__macro_62_3e_61-3-2
5C7D: CD2881  	        call MacroExpander
5C80: 62      	        ld         h,d
5C81: 6B      	        ld         l,e
5C82:         	end_word_def__macro_62_3e_61:
              	
              	; ***** swap *****
              	
5C82:         	word_def__macro_73_77_61_70:
5C82: 3E01    	        ld a,end_word_def__macro_73_77_61_70-word_def__macro_73_77_61_70-3-2
5C84: CD2881  	        call MacroExpander
5C87: EB      	        ex         de,hl
5C88:         	end_word_def__macro_73_77_61_70:
              	
              	; ***** breakpoint *****
              	
5C88:         	word_def__macro_62_72_65_61_6b_70_6f_69_6e_74:
5C88: 3E02    	        ld a,end_word_def__macro_62_72_65_61_6b_70_6f_69_6e_74-word_def__macro_62_72_65_61_6b_70_6f_69_6e_74-3-2
5C8A: CD2881  	        call MacroExpander
5C8D: DD01    	        db         $DD,$01
5C8F:         	end_word_def__macro_62_72_65_61_6b_70_6f_69_6e_74:
              	
              	; ***** halt *****
              	
5C8F:         	word_def__macro_68_61_6c_74:
5C8F: 3E03    	        ld a,end_word_def__macro_68_61_6c_74-word_def__macro_68_61_6c_74-3-2
5C91: CD2881  	        call MacroExpander
5C94:         	HaltProcessor:
5C94: 76      	        halt                                         ; halt that enables interrupt.
5C95: 18FD    	        jr         HaltProcessor
5C97:         	end_word_def__macro_68_61_6c_74:
              	
              	; ***** 1- *****
              	
5C97:         	word_def__macro_31_2d:
5C97: 3E01    	        ld a,end_word_def__macro_31_2d-word_def__macro_31_2d-3-2
5C99: CD2881  	        call MacroExpander
5C9C: 2B      	        dec     hl
5C9D:         	end_word_def__macro_31_2d:
              	
              	; ***** 1+ *****
              	
5C9D:         	word_def__macro_31_2b:
5C9D: 3E01    	        ld a,end_word_def__macro_31_2b-word_def__macro_31_2b-3-2
5C9F: CD2881  	        call MacroExpander
5CA2: 23      	        inc     hl
5CA3:         	end_word_def__macro_31_2b:
              	
              	; ***** 2/ *****
              	
5CA3:         	word_def__macro_32_2f:
5CA3: 3E04    	        ld a,end_word_def__macro_32_2f-word_def__macro_32_2f-3-2
5CA5: CD2881  	        call MacroExpander
5CA8: CB2C    	        sra     h
5CAA: CB1D    	        rr         l
5CAC:         	end_word_def__macro_32_2f:
              	
              	; ***** 2- *****
              	
5CAC:         	word_def__macro_32_2d:
5CAC: 3E02    	        ld a,end_word_def__macro_32_2d-word_def__macro_32_2d-3-2
5CAE: CD2881  	        call MacroExpander
5CB1: 2B      	        dec     hl
5CB2: 2B      	        dec     hl
5CB3:         	end_word_def__macro_32_2d:
              	
              	; ***** 2+ *****
              	
5CB3:         	word_def__macro_32_2b:
5CB3: 3E02    	        ld a,end_word_def__macro_32_2b-word_def__macro_32_2b-3-2
5CB5: CD2881  	        call MacroExpander
5CB8: 23      	        inc     hl
5CB9: 23      	        inc     hl
5CBA:         	end_word_def__macro_32_2b:
              	
              	; ***** 2* *****
              	
5CBA:         	word_def__macro_32_2a:
5CBA: 3E01    	        ld a,end_word_def__macro_32_2a-word_def__macro_32_2a-3-2
5CBC: CD2881  	        call MacroExpander
5CBF: 29      	        add     hl,hl
5CC0:         	end_word_def__macro_32_2a:
              	
              	; ***** bswap *****
              	
5CC0:         	word_def__macro_62_73_77_61_70:
5CC0: 3E03    	        ld a,end_word_def__macro_62_73_77_61_70-word_def__macro_62_73_77_61_70-3-2
5CC2: CD2881  	        call MacroExpander
5CC5: 7C      	        ld         a,h
5CC6: 65      	        ld         h,l
5CC7: 6F      	        ld         l,a
5CC8:         	end_word_def__macro_62_73_77_61_70:
              			include "support/hardware.asm"				; console routines
              	; *********************************************************************************
              	; *********************************************************************************
              	;
              	;		File:		hardware.asm
              	;		Purpose:	Hardware interface to Spectrum
              	;		Date:		25th July 2018
              	;		Author:		paul@robsons.org.uk
              	;
              	; *********************************************************************************
              	; *********************************************************************************
              		
              	IOScreenWidth = 32 									; screen size
              	IOScreenHeight = 24
              	
              	; *********************************************************************************
              	;
              	;		Set the current display cursor position to the offset specified in
              	;		the lower 10 bits of HL.
              	;
              	; *********************************************************************************
              	
5CC8:         	IOSetCursor:
5CC8: F5      			push 	af									; save registers
5CC9: E5      			push 	hl
5CCA: 2A595E  			ld 		hl,(IOCursorPosition)				; remove old cursor
5CCD: CBBE    			res 	7,(hl)
5CCF: E1      			pop 	hl
5CD0: E5      			push 	hl
5CD1: 7C      			ld 		a,h 								; convert new cursor to attr pos
5CD2: E603    			and 	$03
5CD4: FE03    			cp 		3 									; cursor position out of range
5CD6: 2806    			jr 		z,__scexit							; don't update
5CD8: F658    			or 		$58
5CDA: 67      			ld 		h,a
5CDB: 22595E  			ld 		(IOCursorPosition),hl
5CDE:         	__scexit:		
5CDE: 2A595E  			ld 		hl,(IOCursorPosition)				; show new cursor
5CE1: CBFE    			set 	7,(hl)		
5CE3: E1      	 		pop		hl
5CE4: F1      			pop 	af
5CE5: C9      			ret
              	
              	; *********************************************************************************
              	;
              	;								Clear the screen
              	;
              	; *********************************************************************************
              	
5CE6:         	IOClearScreen:
5CE6: F5      			push 	af 									; save registers
5CE7: E5      			push 	hl
5CE8: 210040  			ld 		hl,$4000 							; clear pixel memory
5CEB: 3600    	__cs1:	ld 		(hl),0
5CED: 23      			inc 	hl
5CEE: 7C      			ld 		a,h
5CEF: FE58    			cp 		$58
5CF1: 20F8    			jr 		nz,__cs1
5CF3: 3647    	__cs2:	ld 		(hl),$47							; clear attribute memory
5CF5: 23      			inc 	hl
5CF6: 7C      			ld 		a,h
5CF7: FE5B    			cp 		$5B
5CF9: 20F8    			jr 		nz,__cs2		
5CFB: 210000  			ld 		hl,0 								; home cursor
5CFE: CDC85C  			call	IOSetCursor
5D01: E1      			pop 	hl 									; restore and exit.
5D02: F1      			pop 	af
5D03: C9      			ret
              	
              	; *********************************************************************************
              	;
              	;	Write a character A on the screen at HL. HL is bits 0-9, A is a 2+6 bit
              	;	colour / character.
              	;
              	; *********************************************************************************
              	
5D04:         	IOWriteCharacter:
5D04: F5      			push 	af 									; save registers
5D05: C5      			push 	bc
5D06: D5      			push 	de
5D07: E5      			push 	hl
              	
5D08: 4F      			ld 		c,a 								; save character in C
              	
5D09: 7C      			ld 		a,h 								; check H in range 0-2
5D0A: E603    			and 	3
5D0C: FE03    			cp 		3
5D0E: 2879    			jr 		z,__wcexit
              	
5D10: E5      			push 	hl 									; save screen address
              	;
              	;		update attribute
              	;
5D11: 7C      			ld 		a,h 								; convert to attribute position
5D12: E603    			and 	$03
5D14: F658    			or 		$58
5D16: 67      			ld 		h,a
              	
5D17: 79      			ld 		a,c 								; rotate left twice
5D18: 07      			rlca
5D19: 07      			rlca
5D1A: E603    			and 	3 									; now a value 0-3
5D1C: C655    			add 	a,__wc_colours & 255 				; add __wc_colours, put in DE
5D1E: 5F      			ld 		e,a
5D1F: 3E5E    			ld 		a,__wc_colours / 256
5D21: CE00    			adc 	a,0
5D23: 57      			ld 		d,a
5D24: 1A      			ld 		a,(de)								; get colours.
5D25: 77      			ld 		(hl),a
              	;
              	;		char# 0-63 to font address
              	;
5D26: 79      			ld 		a,c 								; A = char#
5D27: E63F    			and 	$3F 								; bits 0-6 only
5D29: EE20    			xor 	$20									; make it 7 bit.		
5D2B: C620    			add 	a,$20		
5D2D: FE41    			cp 		'A' 								; make it lower case
5D2F: 3806    			jr 		c,__wc2
5D31: FE5B    			cp 		'Z'+1
5D33: 3002    			jr 		nc,__wc2
5D35: C620    			add 	a,$20
5D37:         	__wc2:
5D37: 6F      			ld 		l,a 								; put in HL
5D38: 2600    			ld 		h,0
5D3A: 29      			add 	hl,hl 								; x 8
5D3B: 29      			add 	hl,hl
5D3C: 29      			add 	hl,hl
5D3D: 11003C  			ld 		de,$3C00 							; add $3C00
5D40: 19      			add 	hl,de
5D41: EB      			ex 		de,hl 								; put in DE (font address)
              	;
              	;		screen position 0-767 to screen address
              	;
5D42: E1      			pop 	hl 									; restore screen address
5D43: 7C      			ld 		a,h 								; L contains Y5-Y3,X4-X0. Get H
5D44: E603    			and 	$03 								; lower 2 bits (Y7,Y6)
5D46: 87      			add 	a,a 								; shift left three times
5D47: 87      			add 	a,a
5D48: 87      			add 	a,a
5D49: F640    			or 		$40 								; set bit 6, HL now points to VRAM.		
5D4B: 67      			ld 		h,a 								; put it back in H.
              	;
              	;		copy font data to screen position.
              	;
              	;
5D4C: 79      			ld 		a,c 								; spaces special case. 
5D4D: E63F    			and 	$3F
5D4F: FE20    			cp 		$20
5D51: 2820    			jr 		z,__isSpace
              	
5D53: 1A      			ld 		a,(de)								; 0
5D54: 77      			ld 		(hl),a
5D55: 24      			inc 	h
5D56: 13      			inc 	de
              	
5D57: 1A      			ld 		a,(de)								; 1
5D58: 77      			ld 		(hl),a
5D59: 24      			inc 	h
5D5A: 13      			inc 	de
              	
5D5B: 1A      			ld 		a,(de)								; 2
5D5C: 77      			ld 		(hl),a
5D5D: 24      			inc 	h
5D5E: 13      			inc 	de
              	
5D5F: 1A      			ld 		a,(de)								; 3
5D60: 77      			ld 		(hl),a
5D61: 24      			inc 	h
5D62: 13      			inc 	de
              	
5D63: 1A      			ld 		a,(de)								; 4
5D64: 77      			ld 		(hl),a
5D65: 24      			inc 	h
5D66: 13      			inc 	de
              	
5D67: 1A      			ld 		a,(de)								; 5
5D68: 77      			ld 		(hl),a
5D69: 24      			inc 	h
5D6A: 13      			inc 	de
              	
5D6B: 1A      			ld 		a,(de)								; 6
5D6C: 77      			ld 		(hl),a
5D6D: 24      			inc 	h
5D6E: 13      			inc 	de
              	
5D6F: 1A      			ld 		a,(de)								; 7
5D70: 77      			ld 		(hl),a
5D71: 1811    			jr 		__wcCursor
              	
5D73:         	__isSpace:
5D73: 3E00    			ld 		a,$00
5D75: 77      			ld		(hl),a
5D76: 24      			inc 	h
5D77: 77      			ld		(hl),a
5D78: 24      			inc 	h
5D79: 77      			ld		(hl),a
5D7A: 24      			inc 	h
5D7B: 77      			ld		(hl),a
5D7C: 24      			inc 	h
5D7D: 77      			ld		(hl),a
5D7E: 24      			inc 	h
5D7F: 77      			ld		(hl),a
5D80: 24      			inc 	h
5D81: 77      			ld		(hl),a
5D82: 24      			inc 	h
5D83: 77      			ld		(hl),a
              	
5D84:         	__wcCursor:
5D84: 2A595E  			ld 		hl,(IOCursorPosition)				; show cursor if we've just overwritten it
5D87: CBFE    			set 	7,(hl)
              	
5D89:         	__wcexit:
5D89: E1      			pop 	hl 									; restore and exit
5D8A: D1      			pop 	de
5D8B: C1      			pop 	bc
5D8C: F1      			pop 	af
5D8D: C9      			ret
              	
              	; *********************************************************************************
              	;
              	;			Scan the keyboard, return currently pressed key code in A
              	;
              	; *********************************************************************************
              	
5D8E:         	IOScanKeyboard:
5D8E: C5      			push 	bc
5D8F: D5      			push 	de
5D90: E5      			push 	hl
              	
5D91: 21DD5D  			ld 		hl,__kr_no_shift_table 				; firstly identify shift state.
              	
5D94: 3EFE    			ld 		a,$FE 								; check CAPS SHIFT (emulator : left shift)
5D96: DBFE    			in 		a,($FE)
5D98: CB47    			bit 	0,a
5D9A: 2003    			jr 		nz,__kr1
5D9C: 212D5E  			ld 		hl,__kr_shift_table
5D9F:         	__kr1:
5D9F: 3E7F    			ld 		a,$7F 								; check SYMBOL SHIFT (emulator : right shift)
5DA1: DBFE    			in 		a,($FE)
5DA3: CB4F    			bit 	1,a
5DA5: 2003    			jr 		nz,__kr2
5DA7: 21055E  			ld 		hl,__kr_symbol_shift_table
5DAA:         	__kr2:
              	
5DAA: 1EFE    			ld 		e,$FE 								; scan pattern.
5DAC: 7B      	__kr3:	ld 		a,e 								; work out the mask, so we don't detect shift keys
5DAD: 161E    			ld 		d,$1E  								; $FE row, don't check the least significant bit.
5DAF: FEFE    			cp 		$FE
5DB1: 2808    			jr 		z,___kr4
5DB3: 161D    			ld 		d,$1D 								; $7F row, don't check the 2nd least significant bit
5DB5: FE7F    			cp 		$7F
5DB7: 2802    			jr 		z,___kr4
5DB9: 161F    			ld 		d,$1F 								; check all bits.
5DBB:         	___kr4:
5DBB: 7B      			ld 		a,e 								; scan the keyboard
5DBC: DBFE    			in 		a,($FE)
5DBE: 2F      			cpl 										; make that active high.
5DBF: A2      			and 	d  									; and with check value.
5DC0: 2011    			jr 		nz,__kr_keypressed 					; exit loop if key pressed.
              	
5DC2: 23      			inc 	hl 									; next set of keyboard characters
5DC3: 23      			inc 	hl
5DC4: 23      			inc 	hl
5DC5: 23      			inc 	hl
5DC6: 23      			inc 	hl
              	
5DC7: 7B      			ld 		a,e 								; get pattern
5DC8: 87      			add 	a,a 								; shift left
5DC9: F601    			or 		$01 								; set bit 1.
5DCB: 5F      			ld 		e,a
              	
5DCC: FEFF    			cp 		$FF 								; finished when all 1's.
5DCE: 20DC    			jr 		nz,__kr3 
5DD0: AF      			xor 	a
5DD1: 1806    			jr 		__kr_exit 							; no key found, return with zero.
              	;
5DD3:         	__kr_keypressed:
5DD3: 23      			inc 	hl  								; shift right until carry set
5DD4: 1F      			rra
5DD5: 30FC    			jr 		nc,__kr_keypressed
5DD7: 2B      			dec 	hl 									; undo the last inc hl
5DD8: 7E      			ld 		a,(hl) 								; get the character number.
5DD9:         	__kr_exit:
5DD9: E1      			pop 	hl
5DDA: D1      			pop 	de
5DDB: C1      			pop 	bc
5DDC: C9      			ret
              	
              	; *********************************************************************************
              	;	 						Keyboard Mapping Tables
              	; *********************************************************************************
              	;
              	;	$FEFE-$7FFE scan, bit 0-4, active low
              	;
              	;	8:Backspace 13:Return 16:19 colours 0-3 20-23:Left Down Up Right 32-95: Std ASCII
              	;
5DDD:         	__kr_no_shift_table:
5DDD: 005A5843			db 		0,  'Z','X','C','V',			'A','S','D','F','G'
5DE1: 56415344	
5DE5: 4647    	
5DE7: 51574552			db 		'Q','W','E','R','T',			'1','2','3','4','5'
5DEB: 54313233	
5DEF: 3435    	
5DF1: 30393837			db 		'0','9','8','7','6',			'P','O','I','U','Y'
5DF5: 36504F49	
5DF9: 5559    	
5DFB: 0D4C4B4A			db 		13, 'L','K','J','H',			' ', 0, 'M','N','B'
5DFF: 4820004D	
5E03: 4E42    	
              	
5E05:         	__kr_symbol_shift_table:
5E05: 003A003F			db 		 0, ':', 0,  '?','/',			'~','|','\','{','}'
5E09: 2F7E7C5C	
5E0D: 7B7D    	
5E0F: 0000003C			db 		 0,  0,  0  ,'<','>',			'!','@','#','$','%'
5E13: 3E214023	
5E17: 2425    	
5E19: 5F292827			db 		'_',')','(',"'",'&',			'"',';', 0, ']','['
5E1D: 26223B00	
5E21: 5D5B    	
5E23: 0D3D2B2D			db 		13, '=','+','-','^',			' ', 0, '.',',','*'
5E27: 5E20002E	
5E2B: 2C2A    	
              	
5E2D:         	__kr_shift_table:
5E2D: 003A003F			db 		0,  ':',0  ,'?','/',			'~','|','\','{','}'
5E31: 2F7E7C5C	
5E35: 7B7D    	
5E37: 0000003C			db 		0,  0,  0  ,'<','>',			16, 17, 18, 19, 20
5E3B: 3E101112	
5E3F: 1314    	
5E41: 08291716			db 		8, ')',23,  22, 21,				'"',';', 0, ']','['
5E45: 15223B00	
5E49: 5D5B    	
5E4B: 0D3D2B2D			db 		13, '=','+','-','^',			' ', 0, '.',',','*'
5E4F: 5E20002E	
5E53: 2C2A    	
              	
              	
              	;
              	;		colour bit colours
              	;
5E55:         	__wc_colours
5E55: 47      			db 		$47 								; 00 (white)
5E56: 42      			db 		$42 								; 01 (red)
5E57: 44      			db 		$44 								; 10 (green)
5E58: 46      			db 		$46 								; 11 (yellow)
              	
5E59:         	IOCursorPosition:
5E59: 0000    			dw 		0
              	
              	; *********************************************************************************
              	;
              	;				Display the four digit integer DE in hex at HL 
              	;
              	; *********************************************************************************
              	
5E5B:         	IODisplayHexInteger:
5E5B: F5      			push 	af									; save registers									
5E5C: D5      			push 	de
5E5D: E5      			push 	hl
5E5E: 7A      			ld		a,d									; print MSB
5E5F: CD6A5E  			call 	__dhl1
5E62: 7B      			ld 		a,e 								; print LSB
5E63: CD6A5E  			call 	__dhl1
5E66: E1      			pop 	hl 									; restore and return
5E67: D1      			pop 	de
5E68: F1      			pop 	af
5E69: C9      			ret
              	
5E6A: F5      	__dhl1:	push 	af 									; save byte
5E6B: 0F      			rrca 										; get high nibble
5E6C: 0F      			rrca
5E6D: 0F      			rrca
5E6E: 0F      			rrca
5E6F: CD735E  			call 	__dhl2 								; print it
5E72: F1      			pop 	af									; get low nibble
5E73: E60F    	__dhl2:	and 	$0F 								; mask low 4 bits
5E75: FE0A    			cp 		10
5E77: 3802    			jr 		c,__dhl3
5E79: C6C7    			add 	a,-48-9	
5E7B: C630    	__dhl3:	add 	a,48
5E7D: CD045D  			call 	IOWriteCharacter					; display it
5E80: 23      			inc 	hl 									; next character slot right
5E81: C9      			ret
              			include "support/multiply.asm"				; arithmetic routines
              	; *********************************************************************************
              	; *********************************************************************************
              	;
              	;		File:		multiply.asm
              	;		Purpose:	16 bit unsigned multiply
              	;		Date:		29th July 2018
              	;		Author:		paul@robsons.org.uk
              	;
              	; *********************************************************************************
              	; *********************************************************************************
              	
              	; *********************************************************************************
              	;
              	;								Does HL = HL * DE
              	;
              	; *********************************************************************************
              	
5E82:         	Multiply16:
5E82: C5      			push 	bc
5E83: D5      			push 	de
5E84: 44      			ld 		b,h 							; get multipliers in DE/BC
5E85: 4D      			ld 		c,l
5E86: 210000  			ld 		hl,0 							; zero total
5E89:         	__Core__Mult_Loop:
5E89: CB41    			bit 	0,c 							; lsb of shifter is non-zero
5E8B: 2801    			jr 		z,__Core__Mult_Shift
5E8D: 19      			add 	hl,de 							; add adder to total
5E8E:         	__Core__Mult_Shift:
5E8E: CB38    			srl 	b 								; shift BC right.
5E90: CB19    			rr 		c
5E92: EB      			ex 		de,hl 							; shift DE left
5E93: 29      			add 	hl,hl
5E94: EB      			ex 		de,hl
5E95: 78      			ld 		a,b 							; loop back if BC is nonzero
5E96: B1      			or 		c
5E97: 20F0    			jr 		nz,__Core__Mult_Loop
5E99: D1      			pop 	de
5E9A: C1      			pop 	bc
5E9B: C9      			ret
              			include "support/divide.asm"
              	; *********************************************************************************
              	; *********************************************************************************
              	;
              	;		File:		divide.asm
              	;		Purpose:	16 bit unsigned divide
              	;		Date:		29th July 2018
              	;		Author:		paul@robsons.org.uk
              	;
              	; *********************************************************************************
              	; *********************************************************************************
              	
              	; *********************************************************************************
              	;
              	;			Calculates DE / HL. On exit DE = result, HL = remainder
              	;
              	; *********************************************************************************
              	
5E9C:         	DivideMod16:
              	
5E9C: C5      		push 	bc
5E9D: 42      		ld 		b,d 				; DE 
5E9E: 4B      		ld 		c,e
5E9F: EB      		ex 		de,hl
5EA0: 210000  		ld 		hl,0
5EA3: 78      		ld 		a,b
5EA4: 0608    		ld 		b,8
5EA6:         	Div16_Loop1:
5EA6: 17      		rla
5EA7: ED6A    		adc 	hl,hl
5EA9: ED52    		sbc 	hl,de
5EAB: 3001    		jr 		nc,Div16_NoAdd1
5EAD: 19      		add 	hl,de
5EAE:         	Div16_NoAdd1:
5EAE: 10F6    		djnz 	Div16_Loop1
5EB0: 17      		rla
5EB1: 2F      		cpl
5EB2: 47      		ld 		b,a
5EB3: 79      		ld 		a,c
5EB4: 48      		ld 		c,b
5EB5: 0608    		ld 		b,8
5EB7:         	Div16_Loop2:
5EB7: 17      		rla
5EB8: ED6A    		adc 	hl,hl
5EBA: ED52    		sbc 	hl,de
5EBC: 3001    		jr 		nc,Div16_NoAdd2
5EBE: 19      		add 	hl,de
5EBF:         	Div16_NoAdd2:
5EBF: 10F6    		djnz 	Div16_Loop2
5EC1: 17      		rla
5EC2: 2F      		cpl
5EC3: 51      		ld 		d,c
5EC4: 5F      		ld 		e,a
5EC5: C1      		pop 	bc
5EC6: C9      		ret
              		
              	
              	editBufferSize = 512 								; size of edit buffer
              	
5EC7: FFFFFFFF			ds 		4
5ECB:         	editBuffer:											; edit buffer. with a little padding
5ECB: FFFFFFFF			ds 		editBufferSize		
5ECF: FF...   	
60CB: FFFFFFFF			ds 		4
              	
60CF:         	DictionaryBase: 									; initial dictionary, which is empty
60CF: 00      			db 		0								
              	
60D0: FFFFFFFF			org 	$8000 								; program space.
60D4: FF...   	
              			include "asm/word.asm"						; built in words
              	; **** generated by scanner.py ****
              	
              	
              	; ***** con.clear.screen *****
              	
8000:         	word_def__word_63_6f_6e_2e_63_6c_65_61_72_2e_73_63_72_65_65_6e:
8000: CDE65C  	        call     IOClearScreen
8003: C9      	        ret
              	
              	; ***** con.copy *****
              	
8004:         	word_def__word_63_6f_6e_2e_63_6f_70_79:
8004: D5      	        push     de
8005: E5      	        push     hl
8006: DDE5    	        push     ix
8008: E5      	        push     hl                                     ; HL -> IX
8009: DDE1    	        pop     ix
800B: DD5E00  	        ld         e,(ix+0)                            ; DE = memory
800E: DD5601  	        ld         d,(ix+1)
8011: DD6E02  	        ld         l,(ix+2)                            ; HL = position
8014: DD6603  	        ld         h,(ix+3)
8017: DD4E04  	        ld         c,(ix+4)                            ; BC = count
801A: DD4605  	        ld         b,(ix+5)
801D:         	__concopy1:
801D: 78      	        ld         a,b                                 ; finished
801E: B1      	        or         c
801F: 2809    	        jr         z,__concopy2
8021: 0B      	        dec     bc
8022: 1A      	        ld         a,(de)
8023: CD045D  	        call    IOWriteCharacter
8026: 23      	        inc     hl
8027: 13      	        inc     de
8028: 18F3    	        jr         __concopy1
802A:         	__concopy2:
802A: DDE1    	        pop     ix
802C: E1      	        pop     hl
802D: D1      	        pop     de
802E: C9      	        ret
              	
              	; ***** con.inkey *****
              	
802F:         	word_def__word_63_6f_6e_2e_69_6e_6b_65_79:
802F: EB      	        ex         de,hl
8030: CD8E5D  	        call     IOScanKeyboard
8033: 6F      	        ld         l,a
8034: 2600    	        ld         h,0
8036: C9      	        ret
              	
              	; ***** con.cursor! *****
              	
8037:         	word_def__word_63_6f_6e_2e_63_75_72_73_6f_72_21:
8037: C3C85C  	        jp         IOSetCursor
803A: C9      	        ret
              	
              	; ***** con.screen! *****
              	
803B:         	word_def__word_63_6f_6e_2e_73_63_72_65_65_6e_21:
803B: 7B      	        ld         a,e
803C: C3045D  	        jp         IOWriteCharacter
803F: C9      	        ret
              	
              	; ***** and *****
              	
8040:         	word_def__word_61_6e_64:
8040: 7C      	        ld         a,h
8041: A2      	        and     d
8042: 67      	        ld         h,a
8043: 7D      	        ld         a,l
8044: A3      	        and     e
8045: 6F      	        ld         l,a
8046: C9      	        ret
              	
              	; ***** max *****
              	
8047:         	word_def__word_6d_61_78:
8047: AF      	        xor     a                                    ; clear carry
8048: ED52    	        sbc     hl,de                                 ; subtract for comparison
804A: 7C      	        ld      a,h                                 ; preserve MSB in A for sign bit
804B: 19      	        add     hl,de                                 ; fix values back.
804C: CB7F    	        bit     7,a                                 ; check bit 7
804E: C8      	        ret     z                                     ; if unsigned HL is largest
804F: 62      	        ld         h,d                                 ; otherwise DE is largest
8050: 6B      	        ld         l,e
8051: C9      	        ret
              	
              	; ***** min *****
              	
8052:         	word_def__word_6d_69_6e:
8052: AF      	        xor     a                                    ; clear carry
8053: ED52    	        sbc     hl,de                                 ; subtract for comparison
8055: 7C      	        ld      a,h                                 ; preserve MSB in A for sign bit
8056: 19      	        add     hl,de                                 ; fix values back.
8057: CB7F    	        bit     7,a                                 ; check bit 7
8059: C0      	        ret     nz                                     ; if unsigned HL is smallest
805A: 62      	        ld         h,d                                 ; otherwise DE is smallest
805B: 6B      	        ld         l,e
805C: C9      	        ret
              	
              	; ***** mod *****
              	
805D:         	word_def__word_6d_6f_64:
805D: D5      	        push         de                             ; save DE (B)
805E: CD9C5E  	        call         DivideMod16                 ; DE = result, HL = mod
8061: D1      	        pop         de                             ; restore DE
8062: C9      	        ret
              	
              	; ***** or *****
              	
8063:         	word_def__word_6f_72:
8063: 7C      	        ld         a,h
8064: B2      	        or         d
8065: 67      	        ld         h,a
8066: 7D      	        ld         a,l
8067: B3      	        or         e
8068: 6F      	        ld         l,a
8069: C9      	        ret
              	
              	; ***** / *****
              	
806A:         	word_def__word_2f:
806A: D5      	        push         de                             ; save DE (B)
806B: CD9C5E  	        call         DivideMod16                 ; DE = result, HL = mod
806E: EB      	        ex             de,hl                         ; result in HL
806F: D1      	        pop         de                             ; restore DE
8070: C9      	        ret
              	
              	; ***** = *****
              	
8071:         	word_def__word_3d:
8071: 7C      	        ld         a,h
8072: BA      	        cp         d
8073: 2008    	        jr         nz,SetFalse
8075: 7D      	        ld         a,l
8076: BB      	        cp         e
8077: 2004    	        jr         nz,SetFalse
8079:         	SetTrue:
8079: 21FFFF  	        ld         hl,$FFFF
807C: C9      	        ret
807D:         	SetFalse:
807D: 210000  	        ld         hl,$0000
8080: C9      	        ret
              	
              	; ***** > *****
              	
8081:         	word_def__word_3e:
8081:         	__Greater:
8081: AF      	        xor     a                                    ; clear carry
8082: ED52    	        sbc     hl,de                                 ; subtract for comparison
8084: 7C      	        ld      a,h                                 ; preserve MSB in A for sign bit
8085: 19      	        add     hl,de                                 ; fix values back.
8086: CB7F    	        bit     7,a                                 ; check bit 7
8088: 20EF    	        jr         nz,SetTrue
808A: 18F1    	        jr         SetFalse
808C: C9      	        ret
              	
              	; ***** >= *****
              	
808D:         	word_def__word_3e_3d:
808D: 7C      	        ld         a,h
808E: BA      	        cp         d
808F: 20F0    	        jr         nz,__Greater
8091: 7D      	        ld         a,l
8092: BB      	        cp         e
8093: 20EC    	        jr         nz,__Greater
8095: 18E2    	        jr         SetTrue
8097: C9      	        ret
              	
              	; ***** < *****
              	
8098:         	word_def__word_3c:
8098: 7C      	        ld         a,h
8099: BA      	        cp         d
809A: 2007    	        jr         nz,__LessEqual
809C: 7D      	        ld         a,l
809D: BB      	        cp         e
809E: 2003    	        jr         nz,__LessEqual
80A0: 18DB    	        jr         SetFalse
80A2: C9      	        ret
              	
              	; ***** <= *****
              	
80A3:         	word_def__word_3c_3d:
80A3:         	__LessEqual:
80A3: AF      	        xor     a                                    ; clear carry
80A4: ED52    	        sbc     hl,de                                 ; subtract for comparison
80A6: 7C      	        ld      a,h                                 ; preserve MSB in A for sign bit
80A7: 19      	        add     hl,de                                 ; fix values back.
80A8: CB7F    	        bit     7,a                                 ; check bit 7
80AA: 28CD    	        jr         z,SetTrue
80AC: 18CF    	        jr         SetFalse
80AE: C9      	        ret
              	
              	; ***** <> *****
              	
80AF:         	word_def__word_3c_3e:
80AF: 7C      	        ld         a,h
80B0: BA      	        cp         d
80B1: 20C6    	        jr         nz,SetTrue
80B3: 7D      	        ld         a,l
80B4: BB      	        cp         e
80B5: 20C2    	        jr         nz,SetTrue
80B7: 18C4    	        jr         SetFalse
80B9: C9      	        ret
              	
              	; ***** xor *****
              	
80BA:         	word_def__word_78_6f_72:
80BA: 7C      	        ld         a,h
80BB: AA      	        xor     d
80BC: 67      	        ld         h,a
80BD: 7D      	        ld         a,l
80BE: AB      	        xor     e
80BF: 6F      	        ld         l,a
80C0: C9      	        ret
              	
              	; ***** -! *****
              	
80C1:         	word_def__word_2d_21:
80C1: 7E      	        ld         a,(hl)
80C2: 93      	        sub     e
80C3: 77      	        ld         (hl),a
80C4: 23      	        inc     hl
80C5: 7E      	        ld         a,(hl)
80C6: 9A      	        sbc     a,d
80C7: 77      	        ld         (hl),a
80C8: C9      	        ret
              	
              	; ***** +! *****
              	
80C9:         	word_def__word_2b_21:
80C9: 7E      	        ld         a,(hl)
80CA: 83      	        add     a,e
80CB: 77      	        ld         (hl),a
80CC: 23      	        inc     hl
80CD: 7E      	        ld         a,(hl)
80CE: 8A      	        adc     a,d
80CF: 77      	        ld         (hl),a
80D0: C9      	        ret
              	
              	; ***** copy *****
              	
80D1:         	word_def__word_63_6f_70_79:
80D1: D5      	        push     de                                     ; save regs
80D2: E5      	        push     hl
80D3: DDE5    	        push     ix
80D5: E5      	        push     hl                                     ; put HL in IX
80D6: DDE1    	        pop     ix
80D8: DD4E04  	        ld         c,(ix+4)                            ; count to BC
80DB: DD4605  	        ld         b,(ix+5)
80DE: 78      	        ld        a,b                                 ; exit if zero
80DF: B1      	        or         c
80E0: 280E    	        jr         z,__copy1
80E2: DD6E00  	        ld         l,(ix+0)                            ; HL = source
80E5: DD6601  	        ld         h,(ix+1)
80E8: DD5E02  	        ld         e,(ix+2)                            ; DE = target
80EB: DD5603  	        ld        d,(ix+3)
80EE: EDB0    	        ldir                                         ; and copy.
80F0:         	__copy1:
80F0: DDE1    	        pop     ix
80F2: E1      	        pop     hl
80F3: D1      	        pop        de
80F4: C9      	        ret
              	
              	; ***** fill *****
              	
80F5:         	word_def__word_66_69_6c_6c:
80F5: D5      	        push     de
80F6: E5      	        push     hl
80F7: 7E      	        ld         a,(hl)                                ; byte in A
80F8: 23      	        inc     hl
80F9: 23      	        inc     hl
80FA: 5E      	        ld         e,(hl)                                ; target into DE temporarily
80FB: 23      	        inc     hl
80FC: 56      	        ld         d,(hl)
80FD: 23      	        inc     hl
80FE: 4E      	        ld         c,(hl)                                ; count into BC
80FF: 23      	        inc     hl
8100: 46      	        ld         b,(hl)
8101: EB      	        ex         de,hl                                ; target in HL now
8102: 5F      	        ld         e,a                                 ; byte in E
8103:         	__fill1:
8103: 78      	        ld         a,b                                 ; finished
8104: B1      	        or         c
8105: 2805    	        jr         z,__fill2
8107: 0B      	        dec     bc
8108: 73      	        ld         (hl),e
8109: 23      	        inc     hl
810A: 18F7    	        jr         __fill1
810C:         	__fill2:
810C: E1      	        pop     hl
810D: D1      	        pop     de
810E: C9      	        ret
              	
              	; ***** debug *****
              	
810F:         	word_def__word_64_65_62_75_67:
810F: D5      	        push     de
8110: E5      	        push     hl
8111: D5      	        push     de
8112: EB      	        ex         de,hl
8113: 21F702  	        ld         hl,23+23*32
8116: CD5B5E  	        call     IODisplayHexInteger
8119: D1      	        pop     de
811A: 21FC02  	        ld         hl,28+23*32
811D: CD5B5E  	        call     IODisplayHexInteger
8120: E1      	        pop     hl
8121: D1      	        pop     de
8122: C9      	        ret
              	
              	; ***** edit.buffer *****
              	
8123:         	word_def__word_65_64_69_74_2e_62_75_66_66_65_72:
8123: EB      	        ex         de,hl
8124: 21CB5E  	        ld         hl,editBuffer
8127: C9      	        ret
              	
              	; ***** macro.expand *****
              	
8128:         	word_def__word_6d_61_63_72_6f_2e_65_78_70_61_6e_64:
8128:         	MacroExpander:
8128: E1      	        pop     hl                                     ; HL = code address, A = count to write
8129: C9      	        ret
              	
              	; ***** sys.info *****
              	
812A:         	word_def__word_73_79_73_2e_69_6e_66_6f:
812A: C9      	        ret
812B: 000000  	        db         0,0,0                                 ; filler
812E:         	SIDictionaryBase:
812E: CF60    	        dw         DictionaryBase                         ; +4,+5 start of dictionary
8130:         	SIDictionaryNextFree:
8130: CF60    	        dw         DictionaryBase                        ; +6,+7 current next free dictionary byte
8132:         	SIProgramNextFree:
8132: 6C81    	        dw         ProgramFree                            ; +8,+9 current next free program byte
8134:         	SIProgramNextFreePage:
8134: 00FF    	        db         0,$FF                                ; +10     current next free program page
8136:         	SIDictionaryOriginalNextFree:
8136: CF60    	        dw         DictionaryBase                        ; +12,+13 cold start next free dictionary byte
8138:         	SIProgramOriginalNextFree:
8138: 6C81    	        dw         ProgramFree                            ; +14,+15 cold start next free program byte
813A:         	SIProgramOriginalNextFreePage:
813A: 00FF    	        db         0,$FF                                ; +16     current next free program page
813C:         	SIDictionaryMarkNextFree:
813C: CF60    	        dw         DictionaryBase                        ; +18,+19 mark next free dictionary byte
813E:         	SIProgramMarkNextFree:
813E: 6C81    	        dw         ProgramFree                            ; +20,+21 mark next free program byte
8140:         	SIProgramMarkNextFreePage:
8140: 00FF    	        db         0,$FF                                ; +22     mark next free program page
8142:         	SIRuntimeAddress:
8142: 945C    	        dw         HaltProcessor                         ; +24,+25 run address of program.
8144:         	SIStack:
8144: 005C    	        dw         StackTop                            ; +26,+27 initial stack value
8146: C9      	        ret
              	
              	; ***** 0= *****
              	
8147:         	word_def__word_30_3d:
8147: 7C      	        ld         a,h
8148: B5      	        or         l
8149: 210000  	        ld         hl,$0000
814C: C0      	        ret     nz
814D: 2B      	        dec     hl
814E: C9      	        ret
              	
              	; ***** 0< *****
              	
814F:         	word_def__word_30_3c:
814F: CB7C    	        bit     7,h
8151: 210000  	        ld         hl,$0000
8154: C8      	        ret     z
8155: 2B      	        dec     hl
8156: C9      	        ret
              	
              	; ***** 0- *****
              	
8157:         	word_def__word_30_2d:
8157:         	__Negate:
8157: 44      	        ld         b,h                                 ; BC = A
8158: 4D      	        ld         c,l
8159: AF      	        xor     a                                     ; CCF
815A: 67      	        ld         h,a                                 ; HL = 0
815B: 6F      	        ld         l,a
815C: ED42    	        sbc     hl,bc                                 ; subract
815E: C9      	        ret
              	
              	; ***** abs *****
              	
815F:         	word_def__word_61_62_73:
815F: CB7C    	        bit     7,h
8161: C8      	        ret        z
8162: 18F3    	        jr         __Negate
8164: C9      	        ret
              	
              	; ***** not *****
              	
8165:         	word_def__word_6e_6f_74:
8165: 7C      	        ld         a,h
8166: 2F      	        cpl
8167: 67      	        ld         h,a
8168: 7D      	        ld         a,l
8169: 2F      	        cpl
816A: 6F      	        ld        l,a
816B: C9      	        ret
816C:         	ProgramFree:
              	


; +++ segments +++

#CODE :        start=23296 len=9836 

; +++ global symbols +++

DictionaryBase                            = $60CF =  24783          system.asm:32
Div16_Loop1                               = $5EA6 =  24230          divide.asm:27
Div16_Loop2                               = $5EB7 =  24247          divide.asm:41
Div16_NoAdd1                              = $5EAE =  24238          divide.asm:33
Div16_NoAdd2                              = $5EBF =  24255          divide.asm:47
DivideMod16                               = $5E9C =  24220          divide.asm:18
HaltProcessor                             = $5C94 =  23700          macro.asm:181
IOClearScreen                             = $5CE6 =  23782          hardware.asm:49
IOCursorPosition                          = $5E59 =  24153          hardware.asm:324
IODisplayHexInteger                       = $5E5B =  24155          hardware.asm:333
IOScanKeyboard                            = $5D8E =  23950          hardware.asm:224
IOScreenHeight                            = $0018 =     24          hardware.asm:13 (unused)
IOScreenWidth                             = $0020 =     32          hardware.asm:12 (unused)
IOSetCursor                               = $5CC8 =  23752          hardware.asm:22
IOWriteCharacter                          = $5D04 =  23812          hardware.asm:76
MacroExpander                             = $8128 =  33064          word.asm:320
Multiply16                                = $5E82 =  24194          multiply.asm:18
ProgramFree                               = $816C =  33132          system.asm:37
SIDictionaryBase                          = $812E =  33070          word.asm:329 (unused)
SIDictionaryMarkNextFree                  = $813C =  33084          word.asm:343 (unused)
SIDictionaryNextFree                      = $8130 =  33072          word.asm:331 (unused)
SIDictionaryOriginalNextFree              = $8136 =  33078          word.asm:337 (unused)
SIProgramMarkNextFree                     = $813E =  33086          word.asm:345 (unused)
SIProgramMarkNextFreePage                 = $8140 =  33088          word.asm:347 (unused)
SIProgramNextFree                         = $8132 =  33074          word.asm:333 (unused)
SIProgramNextFreePage                     = $8134 =  33076          word.asm:335 (unused)
SIProgramOriginalNextFree                 = $8138 =  33080          word.asm:339 (unused)
SIProgramOriginalNextFreePage             = $813A =  33082          word.asm:341 (unused)
SIRuntimeAddress                          = $8142 =  33090          word.asm:349
SIStack                                   = $8144 =  33092          word.asm:351
SetFalse                                  = $807D =  32893          word.asm:139
SetTrue                                   = $8079 =  32889          word.asm:136
StackTop                                  = $5C00 =  23552          system.asm:19
__Core__Mult_Loop                         = $5E89 =  24201          multiply.asm:24
__Core__Mult_Shift                        = $5E8E =  24206          multiply.asm:28
__Greater                                 = $8081 =  32897          word.asm:146
__LessEqual                               = $80A3 =  32931          word.asm:183
__Negate                                  = $8157 =  33111          word.asm:377
___kr4                                    = $5DBB =  23995          hardware.asm:253
__concopy1                                = $801D =  32797          word.asm:24
__concopy2                                = $802A =  32810          word.asm:34
__copy1                                   = $80F0 =  33008          word.asm:258
__cs1                                     = $5CEB =  23787          hardware.asm:53
__cs2                                     = $5CF3 =  23795          hardware.asm:58
__dhl1                                    = $5E6A =  24170          hardware.asm:346
__dhl2                                    = $5E73 =  24179          hardware.asm:353
__dhl3                                    = $5E7B =  24187          hardware.asm:357
__fill1                                   = $8103 =  33027          word.asm:281
__fill2                                   = $810C =  33036          word.asm:289
__isSpace                                 = $5D73 =  23923          hardware.asm:189
__kr1                                     = $5D9F =  23967          hardware.asm:236
__kr2                                     = $5DAA =  23978          hardware.asm:242
__kr3                                     = $5DAC =  23980          hardware.asm:245
__kr_exit                                 = $5DD9 =  24025          hardware.asm:282
__kr_keypressed                           = $5DD3 =  24019          hardware.asm:276
__kr_no_shift_table                       = $5DDD =  24029          hardware.asm:296
__kr_shift_table                          = $5E2D =  24109          hardware.asm:308
__kr_symbol_shift_table                   = $5E05 =  24069          hardware.asm:302
__scexit                                  = $5CDE =  23774          hardware.asm:36
__wc2                                     = $5D37 =  23863          hardware.asm:121
__wcCursor                                = $5D84 =  23940          hardware.asm:207
__wc_colours                              = $5E55 =  24149          hardware.asm:318
__wcexit                                  = $5D89 =  23945          hardware.asm:211
editBuffer                                = $5ECB =  24267          system.asm:28
editBufferSize                            = $0200 =    512          system.asm:25
end_word_def__macro_21                    = $5C3A =  23610          macro.asm:70
end_word_def__macro_2a                    = $5C1A =  23578          macro.asm:31
end_word_def__macro_2b                    = $5C12 =  23570          macro.asm:23
end_word_def__macro_2d                    = $5C0C =  23564          macro.asm:15
end_word_def__macro_31_2b                 = $5CA3 =  23715          macro.asm:200
end_word_def__macro_31_2d                 = $5C9D =  23709          macro.asm:192
end_word_def__macro_32_2a                 = $5CC0 =  23744          macro.asm:235
end_word_def__macro_32_2b                 = $5CBA =  23738          macro.asm:227
end_word_def__macro_32_2d                 = $5CB3 =  23731          macro.asm:218
end_word_def__macro_32_2f                 = $5CAC =  23724          macro.asm:209
end_word_def__macro_3b                    = $5C64 =  23652          macro.asm:122
end_word_def__macro_40                    = $5C31 =  23601          macro.asm:59
end_word_def__macro_61_3e_62              = $5C7B =  23675          macro.asm:149
end_word_def__macro_61_3e_72              = $5C5E =  23646          macro.asm:114
end_word_def__macro_62_3e_61              = $5C82 =  23682          macro.asm:158
end_word_def__macro_62_72_65_61_6b_70_6f_69_6e_74 = $5C8F =  23695          macro.asm:174
end_word_def__macro_62_73_77_61_70        = $5CC8 =  23752          macro.asm:245
end_word_def__macro_63_21                 = $5C28 =  23592          macro.asm:48
end_word_def__macro_63_40                 = $5C22 =  23586          macro.asm:40
end_word_def__macro_66_61_6c_73_65        = $5C43 =  23619          macro.asm:79
end_word_def__macro_68_61_6c_74           = $5C97 =  23703          macro.asm:184
end_word_def__macro_70_6f_70_2e_61_62     = $5C4A =  23626          macro.asm:88
end_word_def__macro_70_6f_70_2e_62_62     = $5C51 =  23633          macro.asm:97
end_word_def__macro_70_75_73_68_2e_61_62  = $5C58 =  23640          macro.asm:106
end_word_def__macro_72_3e_61              = $5C6B =  23659          macro.asm:131
end_word_def__macro_73_77_61_70           = $5C88 =  23688          macro.asm:166
end_word_def__macro_74_72_75_65           = $5C74 =  23668          macro.asm:140
word_def__macro_21                        = $5C31 =  23601          macro.asm:63
word_def__macro_2a                        = $5C12 =  23570          macro.asm:27
word_def__macro_2b                        = $5C0C =  23564          macro.asm:19
word_def__macro_2d                        = $5C00 =  23552          macro.asm:6
word_def__macro_31_2b                     = $5C9D =  23709          macro.asm:196
word_def__macro_31_2d                     = $5C97 =  23703          macro.asm:188
word_def__macro_32_2a                     = $5CBA =  23738          macro.asm:231
word_def__macro_32_2b                     = $5CB3 =  23731          macro.asm:222
word_def__macro_32_2d                     = $5CAC =  23724          macro.asm:213
word_def__macro_32_2f                     = $5CA3 =  23715          macro.asm:204
word_def__macro_3b                        = $5C5E =  23646          macro.asm:118
word_def__macro_40                        = $5C28 =  23592          macro.asm:52
word_def__macro_61_3e_62                  = $5C74 =  23668          macro.asm:144
word_def__macro_61_3e_72                  = $5C58 =  23640          macro.asm:110
word_def__macro_62_3e_61                  = $5C7B =  23675          macro.asm:153
word_def__macro_62_72_65_61_6b_70_6f_69_6e_74 = $5C88 =  23688          macro.asm:170
word_def__macro_62_73_77_61_70            = $5CC0 =  23744          macro.asm:239
word_def__macro_63_21                     = $5C22 =  23586          macro.asm:44
word_def__macro_63_40                     = $5C1A =  23578          macro.asm:35
word_def__macro_66_61_6c_73_65            = $5C3A =  23610          macro.asm:74
word_def__macro_68_61_6c_74               = $5C8F =  23695          macro.asm:178
word_def__macro_70_6f_70_2e_61_62         = $5C43 =  23619          macro.asm:83
word_def__macro_70_6f_70_2e_62_62         = $5C4A =  23626          macro.asm:92
word_def__macro_70_75_73_68_2e_61_62      = $5C51 =  23633          macro.asm:101
word_def__macro_72_3e_61                  = $5C64 =  23652          macro.asm:126
word_def__macro_73_77_61_70               = $5C82 =  23682          macro.asm:162
word_def__macro_74_72_75_65               = $5C6B =  23659          macro.asm:135
word_def__word_2b_21                      = $80C9 =  32969          word.asm:230 (unused)
word_def__word_2d_21                      = $80C1 =  32961          word.asm:218 (unused)
word_def__word_2f                         = $806A =  32874          word.asm:120 (unused)
word_def__word_30_2d                      = $8157 =  33111          word.asm:376 (unused)
word_def__word_30_3c                      = $814F =  33103          word.asm:367 (unused)
word_def__word_30_3d                      = $8147 =  33095          word.asm:357 (unused)
word_def__word_3c                         = $8098 =  32920          word.asm:170 (unused)
word_def__word_3c_3d                      = $80A3 =  32931          word.asm:182 (unused)
word_def__word_3c_3e                      = $80AF =  32943          word.asm:195 (unused)
word_def__word_3d                         = $8071 =  32881          word.asm:129 (unused)
word_def__word_3e                         = $8081 =  32897          word.asm:145 (unused)
word_def__word_3e_3d                      = $808D =  32909          word.asm:158 (unused)
word_def__word_61_62_73                   = $815F =  33119          word.asm:388 (unused)
word_def__word_61_6e_64                   = $8040 =  32832          word.asm:64 (unused)
word_def__word_63_6f_6e_2e_63_6c_65_61_72_2e_73_63_72_65_65_6e = $8000 =  32768          word.asm:6 (unused)
word_def__word_63_6f_6e_2e_63_6f_70_79    = $8004 =  32772          word.asm:12 (unused)
word_def__word_63_6f_6e_2e_63_75_72_73_6f_72_21 = $8037 =  32823          word.asm:51 (unused)
word_def__word_63_6f_6e_2e_69_6e_6b_65_79 = $802F =  32815          word.asm:42 (unused)
word_def__word_63_6f_6e_2e_73_63_72_65_65_6e_21 = $803B =  32827          word.asm:57 (unused)
word_def__word_63_6f_70_79                = $80D1 =  32977          word.asm:242 (unused)
word_def__word_64_65_62_75_67             = $810F =  33039          word.asm:296 (unused)
word_def__word_65_64_69_74_2e_62_75_66_66_65_72 = $8123 =  33059          word.asm:312 (unused)
word_def__word_66_69_6c_6c                = $80F5 =  33013          word.asm:266 (unused)
word_def__word_6d_61_63_72_6f_2e_65_78_70_61_6e_64 = $8128 =  33064          word.asm:319 (unused)
word_def__word_6d_61_78                   = $8047 =  32839          word.asm:75 (unused)
word_def__word_6d_69_6e                   = $8052 =  32850          word.asm:88 (unused)
word_def__word_6d_6f_64                   = $805D =  32861          word.asm:101 (unused)
word_def__word_6e_6f_74                   = $8165 =  33125          word.asm:396 (unused)
word_def__word_6f_72                      = $8063 =  32867          word.asm:109 (unused)
word_def__word_73_79_73_2e_69_6e_66_6f    = $812A =  33066          word.asm:326 (unused)
word_def__word_78_6f_72                   = $80BA =  32954          word.asm:207 (unused)


total time: 0.0044 sec.
no errors
