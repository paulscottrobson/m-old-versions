; **** generated by scanner.py ****


; ***** con.clear.screen *****

word_def__word_63_6f_6e_2e_63_6c_65_61_72_2e_73_63_72_65_65_6e:
        call     IOClearScreen
        ret

; ***** con.copy *****

word_def__word_63_6f_6e_2e_63_6f_70_79:
        push     de
        push     hl
        push     ix
        push     hl                                     ; HL -> IX
        pop     ix
        ld         e,(ix+0)                            ; DE = memory
        ld         d,(ix+1)
        ld         l,(ix+2)                            ; HL = position
        ld         h,(ix+3)
        ld         c,(ix+4)                            ; BC = count
        ld         b,(ix+5)
__concopy1:
        ld         a,b                                 ; finished
        or         c
        jr         z,__concopy2
        dec     bc
        ld         a,(de)
        call    IOWriteCharacter
        inc     hl
        inc     de
        jr         __concopy1
__concopy2:
        pop     ix
        pop     hl
        pop     de
        ret

; ***** con.inkey *****

word_def__word_63_6f_6e_2e_69_6e_6b_65_79:
        ex         de,hl
        call     IOScanKeyboard
        ld         l,a
        ld         h,0
        ret

; ***** con.cursor! *****

word_def__word_63_6f_6e_2e_63_75_72_73_6f_72_21:
        jp         IOSetCursor
        ret

; ***** con.screen! *****

word_def__word_63_6f_6e_2e_73_63_72_65_65_6e_21:
        ld         a,e
        jp         IOWriteCharacter
        ret

; ***** and *****

word_def__word_61_6e_64:
        ld         a,h
        and     d
        ld         h,a
        ld         a,l
        and     e
        ld         l,a
        ret

; ***** max *****

word_def__word_6d_61_78:
        xor     a                                    ; clear carry
        sbc     hl,de                                 ; subtract for comparison
        ld      a,h                                 ; preserve MSB in A for sign bit
        add     hl,de                                 ; fix values back.
        bit     7,a                                 ; check bit 7
        ret     z                                     ; if unsigned HL is largest
        ld         h,d                                 ; otherwise DE is largest
        ld         l,e
        ret

; ***** min *****

word_def__word_6d_69_6e:
        xor     a                                    ; clear carry
        sbc     hl,de                                 ; subtract for comparison
        ld      a,h                                 ; preserve MSB in A for sign bit
        add     hl,de                                 ; fix values back.
        bit     7,a                                 ; check bit 7
        ret     nz                                     ; if unsigned HL is smallest
        ld         h,d                                 ; otherwise DE is smallest
        ld         l,e
        ret

; ***** mod *****

word_def__word_6d_6f_64:
        push         de                             ; save DE (B)
        call         DivideMod16                 ; DE = result, HL = mod
        pop         de                             ; restore DE
        ret

; ***** or *****

word_def__word_6f_72:
        ld         a,h
        or         d
        ld         h,a
        ld         a,l
        or         e
        ld         l,a
        ret

; ***** / *****

word_def__word_2f:
        push         de                             ; save DE (B)
        call         DivideMod16                 ; DE = result, HL = mod
        ex             de,hl                         ; result in HL
        pop         de                             ; restore DE
        ret

; ***** = *****

word_def__word_3d:
        ld         a,h
        cp         d
        jr         nz,SetFalse
        ld         a,l
        cp         e
        jr         nz,SetFalse
SetTrue:
        ld         hl,$FFFF
        ret
SetFalse:
        ld         hl,$0000
        ret

; ***** > *****

word_def__word_3e:
__Greater:
        xor     a                                    ; clear carry
        sbc     hl,de                                 ; subtract for comparison
        ld      a,h                                 ; preserve MSB in A for sign bit
        add     hl,de                                 ; fix values back.
        bit     7,a                                 ; check bit 7
        jr         nz,SetTrue
        jr         SetFalse
        ret

; ***** >= *****

word_def__word_3e_3d:
        ld         a,h
        cp         d
        jr         nz,__Greater
        ld         a,l
        cp         e
        jr         nz,__Greater
        jr         SetTrue
        ret

; ***** < *****

word_def__word_3c:
        ld         a,h
        cp         d
        jr         nz,__LessEqual
        ld         a,l
        cp         e
        jr         nz,__LessEqual
        jr         SetFalse
        ret

; ***** <= *****

word_def__word_3c_3d:
__LessEqual:
        xor     a                                    ; clear carry
        sbc     hl,de                                 ; subtract for comparison
        ld      a,h                                 ; preserve MSB in A for sign bit
        add     hl,de                                 ; fix values back.
        bit     7,a                                 ; check bit 7
        jr         z,SetTrue
        jr         SetFalse
        ret

; ***** <> *****

word_def__word_3c_3e:
        ld         a,h
        cp         d
        jr         nz,SetTrue
        ld         a,l
        cp         e
        jr         nz,SetTrue
        jr         SetFalse
        ret

; ***** xor *****

word_def__word_78_6f_72:
        ld         a,h
        xor     d
        ld         h,a
        ld         a,l
        xor     e
        ld         l,a
        ret

; ***** -! *****

word_def__word_2d_21:
        ld         a,(hl)
        sub     e
        ld         (hl),a
        inc     hl
        ld         a,(hl)
        sbc     a,d
        ld         (hl),a
        ret

; ***** +! *****

word_def__word_2b_21:
        ld         a,(hl)
        add     a,e
        ld         (hl),a
        inc     hl
        ld         a,(hl)
        adc     a,d
        ld         (hl),a
        ret

; ***** copy *****

word_def__word_63_6f_70_79:
        push     de                                     ; save regs
        push     hl
        push     ix
        push     hl                                     ; put HL in IX
        pop     ix
        ld         c,(ix+4)                            ; count to BC
        ld         b,(ix+5)
        ld        a,b                                 ; exit if zero
        or         c
        jr         z,__copy1
        ld         l,(ix+0)                            ; HL = source
        ld         h,(ix+1)
        ld         e,(ix+2)                            ; DE = target
        ld        d,(ix+3)
        ldir                                         ; and copy.
__copy1:
        pop     ix
        pop     hl
        pop        de
        ret

; ***** fill *****

word_def__word_66_69_6c_6c:
        push     de
        push     hl
        ld         a,(hl)                                ; byte in A
        inc     hl
        inc     hl
        ld         e,(hl)                                ; target into DE temporarily
        inc     hl
        ld         d,(hl)
        inc     hl
        ld         c,(hl)                                ; count into BC
        inc     hl
        ld         b,(hl)
        ex         de,hl                                ; target in HL now
        ld         e,a                                 ; byte in E
__fill1:
        ld         a,b                                 ; finished
        or         c
        jr         z,__fill2
        dec     bc
        ld         (hl),e
        inc     hl
        jr         __fill1
__fill2:
        pop     hl
        pop     de
        ret

; ***** debug *****

word_def__word_64_65_62_75_67:
        push     de
        push     hl
        push     de
        ex         de,hl
        ld         hl,23+23*32
        call     IODisplayHexInteger
        pop     de
        ld         hl,28+23*32
        call     IODisplayHexInteger
        pop     hl
        pop     de
        ret

; ***** macro.expand *****

word_def__word_6d_61_63_72_6f_2e_65_78_70_61_6e_64:
MacroExpander:
        pop     hl                                     ; HL = code address, A = count to write
        ret

; ***** sys.info *****

word_def__word_73_79_73_2e_69_6e_66_6f:
        ret
        db         0,0,0                                 ; filler
SIDictionaryBase:
        dw         DictionaryBase                         ; +4,+5 start of dictionary
SIDictionaryNextFree:
        dw         DictionaryBase                        ; +6,+7 current next free dictionary byte
SIProgramNextFree:
        dw         ProgramFree                            ; +8,+9 current next free program byte
SIProgramNextFreePage:
        db         0,$FF                                ; +10     current next free program page
SIDictionaryOriginalNextFree:
        dw         DictionaryBase                        ; +12,+13 cold start next free dictionary byte
SIProgramOriginalNextFree:
        dw         ProgramFree                            ; +14,+15 cold start next free program byte
SIProgramOriginalNextFreePage:
        db         0,$FF                                ; +16     current next free program page
SIDictionaryMarkNextFree:
        dw         DictionaryBase                        ; +18,+19 mark next free dictionary byte
SIProgramMarkNextFree:
        dw         ProgramFree                            ; +20,+21 mark next free program byte
SIProgramMarkNextFreePage:
        db         0,$FF                                ; +22     mark next free program page
SIRuntimeAddress:
        dw         HaltProcessor                         ; +24,+25 run address of program.
SIStack:
        dw         StackTop                            ; +26,+27 initial stack value
        ret

; ***** 0= *****

word_def__word_30_3d:
        ld         a,h
        or         l
        ld         hl,$0000
        ret     nz
        dec     hl
        ret

; ***** 0< *****

word_def__word_30_3c:
        bit     7,h
        ld         hl,$0000
        ret     z
        dec     hl
        ret

; ***** 0- *****

word_def__word_30_2d:
__Negate:
        ld         b,h                                 ; BC = A
        ld         c,l
        xor     a                                     ; CCF
        ld         h,a                                 ; HL = 0
        ld         l,a
        sbc     hl,bc                                 ; subract
        ret

; ***** abs *****

word_def__word_61_62_73:
        bit     7,h
        ret        z
        jr         __Negate
        ret

; ***** not *****

word_def__word_6e_6f_74:
        ld         a,h
        cpl
        ld         h,a
        ld         a,l
        cpl
        ld        l,a
        ret

; ***** edit.buffer *****

word_def__word_65_64_69_74_2e_62_75_66_66_65_72:
        ex         de,hl
        ld         hl,editBuffer
        ret
